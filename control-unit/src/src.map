Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/crtm328p.o (exit)
/usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
                              main.o (__do_copy_data)
/usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
                              AVR_TTC_scheduler.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

SCH_tasks_G         0x23              AVR_TTC_scheduler.o

Discarded input sections

 .bss           0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/crtm328p.o
 .text          0x0000000000000000        0x0 lightSensor.o
 .bss           0x0000000000000000        0x0 lightSensor.o
 .text.initLightADC
                0x0000000000000000       0x18 lightSensor.o
 .text.sampleLightADC
                0x0000000000000000       0x30 lightSensor.o
 .text          0x0000000000000000        0x0 tempSensor.o
 .bss           0x0000000000000000        0x0 tempSensor.o
 .text          0x0000000000000000        0x0 AVR_TTC_scheduler.o
 .bss           0x0000000000000000        0x0 AVR_TTC_scheduler.o
 .text          0x0000000000000000        0x0 main.o
 .bss           0x0000000000000000        0x0 main.o
 .text.setLeds  0x0000000000000000        0x4 main.o
 .text.init_PORTB
                0x0000000000000000        0x6 main.o
 .rodata.str1.1
                0x0000000000000000        0x5 main.o
 .text.testUART
                0x0000000000000000        0x8 main.o
 .text.resetADC
                0x0000000000000000        0xa main.o
 .text          0x0000000000000000        0x0 UART.o
 .bss           0x0000000000000000        0x0 UART.o
 .text.uart_putChar
                0x0000000000000000        0xe UART.o
 .text.uart_putString
                0x0000000000000000       0x3a UART.o
 .text          0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 .bss           0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 .text.libgcc.mul
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 .text.libgcc.div
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 .text.libgcc.prologue
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 .text.libgcc.builtins
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 .text.libgcc.fmul
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 .text.libgcc.fixed
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 .text          0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
 .bss           0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.mul
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.div
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
 .text.libgcc   0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.prologue
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.builtins
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.fmul
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.fixed
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
 .text          0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
 .bss           0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.mul
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.div
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc   0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.prologue
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.builtins
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.fmul
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.fixed
                0x0000000000000000        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000020000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
user_signatures  0x0000000000850000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/crtm328p.o
LOAD lightSensor.o
LOAD tempSensor.o
LOAD AVR_TTC_scheduler.o
LOAD main.o
LOAD UART.o
START GROUP
LOAD /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a
LOAD /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/libm.a
LOAD /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/libc.a
END GROUP

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x4f8
 *(.vectors)
 .vectors       0x0000000000000000       0x68 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/crtm328p.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
                0x0000000000000068                . = ALIGN (0x2)
                0x0000000000000068                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000000000000068        0x0 linker stubs
 *(.trampolines*)
                0x0000000000000068                __trampolines_end = .
 *(.progmem*)
                0x0000000000000068                . = ALIGN (0x2)
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000000000000068                __ctors_start = .
 *(.ctors)
                0x0000000000000068                __ctors_end = .
                0x0000000000000068                __dtors_start = .
 *(.dtors)
                0x0000000000000068                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000000000000068        0x0 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/crtm328p.o
                0x0000000000000068                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000000000000068        0xc /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/crtm328p.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000000000000074       0x16 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
                0x0000000000000074                __do_copy_data
 .init4         0x000000000000008a       0x10 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
                0x000000000000008a                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x000000000000009a        0x8 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/crtm328p.o
 *(.init9)
 *(.text)
 .text          0x00000000000000a2        0x4 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/crtm328p.o
                0x00000000000000a2                __vector_22
                0x00000000000000a2                __vector_1
                0x00000000000000a2                __vector_24
                0x00000000000000a2                __vector_12
                0x00000000000000a2                __bad_interrupt
                0x00000000000000a2                __vector_6
                0x00000000000000a2                __vector_3
                0x00000000000000a2                __vector_23
                0x00000000000000a2                __vector_25
                0x00000000000000a2                __vector_13
                0x00000000000000a2                __vector_17
                0x00000000000000a2                __vector_19
                0x00000000000000a2                __vector_7
                0x00000000000000a2                __vector_5
                0x00000000000000a2                __vector_4
                0x00000000000000a2                __vector_9
                0x00000000000000a2                __vector_2
                0x00000000000000a2                __vector_21
                0x00000000000000a2                __vector_15
                0x00000000000000a2                __vector_8
                0x00000000000000a2                __vector_14
                0x00000000000000a2                __vector_10
                0x00000000000000a2                __vector_16
                0x00000000000000a2                __vector_20
                0x00000000000000a6                . = ALIGN (0x2)
 *(.text.*)
 .text.initTempADC
                0x00000000000000a6       0x22 tempSensor.o
                0x00000000000000a6                initTempADC
 .text.sampleTempADC
                0x00000000000000c8       0x30 tempSensor.o
                0x00000000000000c8                sampleTempADC
 .text.SCH_Add_Task
                0x00000000000000f8       0x30 AVR_TTC_scheduler.o
                0x00000000000000f8                SCH_Add_Task
 .text.SCH_Delete_Task
                0x0000000000000128       0x1e AVR_TTC_scheduler.o
                0x0000000000000128                SCH_Delete_Task
 .text.SCH_Dispatch_Tasks
                0x0000000000000146       0x56 AVR_TTC_scheduler.o
                0x0000000000000146                SCH_Dispatch_Tasks
 .text.SCH_Init_T1
                0x000000000000019c       0x2c AVR_TTC_scheduler.o
                0x000000000000019c                SCH_Init_T1
 .text.SCH_Start
                0x00000000000001c8        0x4 AVR_TTC_scheduler.o
                0x00000000000001c8                SCH_Start
 .text.__vector_11
                0x00000000000001cc       0x64 AVR_TTC_scheduler.o
                0x00000000000001cc                __vector_11
 .text.startup.main
                0x0000000000000230       0x4a main.o
                0x0000000000000230                main
 .text.blinkYellowLed
                0x000000000000027a       0x36 main.o
                0x000000000000027a                blinkYellowLed
 .text.changeState
                0x00000000000002b0       0x3e main.o
                0x00000000000002b0                changeState
 .text.getTemperature
                0x00000000000002ee       0x16 main.o
                0x00000000000002ee                getTemperature
 .text.checkTemperature
                0x0000000000000304       0x20 main.o
                0x0000000000000304                checkTemperature
 .text.getLightLevel
                0x0000000000000324       0x12 main.o
                0x0000000000000324                getLightLevel
 .text.checkLight
                0x0000000000000336       0x20 main.o
                0x0000000000000336                checkLight
 .text.__vector_18
                0x0000000000000356      0x14e main.o
                0x0000000000000356                __vector_18
 .text.uart_init
                0x00000000000004a4       0x22 UART.o
                0x00000000000004a4                uart_init
 .text.uart_getByte
                0x00000000000004c6        0xe UART.o
                0x00000000000004c6                uart_getByte
 .text.uart_putByte
                0x00000000000004d4        0xe UART.o
                0x00000000000004d4                uart_putByte
 .text.uart_putTwoBytes
                0x00000000000004e2       0x12 UART.o
                0x00000000000004e2                uart_putTwoBytes
                0x00000000000004f4                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x00000000000004f4        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
                0x00000000000004f4                exit
                0x00000000000004f4                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x00000000000004f4        0x4 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 *(.fini0)
                0x00000000000004f8                _etext = .

.data           0x0000000000800100        0x6 load address 0x00000000000004f8
                0x0000000000800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.1/../../../avr/lib/avr5/crtm328p.o
 .data          0x0000000000800100        0x0 lightSensor.o
 .data          0x0000000000800100        0x0 tempSensor.o
 .data          0x0000000000800100        0x0 AVR_TTC_scheduler.o
 .data          0x0000000000800100        0x0 main.o
 .data          0x0000000000800100        0x0 UART.o
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_exit.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_copy_data.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.1/avr5/libgcc.a(_clear_bss.o)
 *(.data*)
 .data._minRollDown
                0x0000000000800100        0x1 main.o
                0x0000000000800100                _minRollDown
 .data._maxRollDown
                0x0000000000800101        0x1 main.o
                0x0000000000800101                _maxRollDown
 .data._lightLimit
                0x0000000000800102        0x2 main.o
                0x0000000000800102                _lightLimit
 .data._temperatureLimit
                0x0000000000800104        0x2 main.o
                0x0000000000800104                _temperatureLimit
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0000000000800106                . = ALIGN (0x2)
                0x0000000000800106                _edata = .
                0x0000000000800106                PROVIDE (__data_end, .)

.bss            0x0000000000800106       0x24
                0x0000000000800106                PROVIDE (__bss_start, .)
 *(.bss)
 *(.bss*)
 .bss._state    0x0000000000800106        0x1 main.o
                0x0000000000800106                _state
 *(COMMON)
 COMMON         0x0000000000800107       0x23 AVR_TTC_scheduler.o
                0x0000000000800107                SCH_tasks_G
                0x000000000080012a                PROVIDE (__bss_end, .)
                0x00000000000004f8                __data_load_start = LOADADDR (.data)
                0x00000000000004fe                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x000000000080012a        0x0
                0x000000000080012a                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x000000000080012a                PROVIDE (__noinit_end, .)
                0x000000000080012a                _end = .
                0x000000000080012a                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.user_signatures
 *(.user_signatures*)

.stab           0x0000000000000000     0x1d7c
 *(.stab)
 .stab          0x0000000000000000      0x474 lightSensor.o
                                        0x540 (size before relaxing)
 .stab          0x0000000000000474      0x408 tempSensor.o
                                        0x5c4 (size before relaxing)
 .stab          0x000000000000087c      0x6a8 AVR_TTC_scheduler.o
                                        0x864 (size before relaxing)
 .stab          0x0000000000000f24      0x9b4 main.o
                                        0xc90 (size before relaxing)
 .stab          0x00000000000018d8      0x4a4 UART.o
                                        0x75c (size before relaxing)

.stabstr        0x0000000000000000     0x11f9
 *(.stabstr)
 .stabstr       0x0000000000000000     0x11f9 lightSensor.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x0000000000000000       0x11
 *(.comment)
 .comment       0x0000000000000000       0x11 lightSensor.o
                                         0x12 (size before relaxing)
 .comment       0x0000000000000000       0x12 tempSensor.o
 .comment       0x0000000000000000       0x12 AVR_TTC_scheduler.o
 .comment       0x0000000000000000       0x12 main.o
 .comment       0x0000000000000000       0x12 UART.o

.note.gnu.build-id
 *(.note.gnu.build-id)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info .gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line .debug_line.* .debug_line_end)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_weaknames
 *(.debug_weaknames)

.debug_funcnames
 *(.debug_funcnames)

.debug_typenames
 *(.debug_typenames)

.debug_varnames
 *(.debug_varnames)

.debug_pubtypes
 *(.debug_pubtypes)

.debug_ranges
 *(.debug_ranges)

.debug_macro
 *(.debug_macro)
OUTPUT(src.elf elf32-avr)
LOAD linker stubs
